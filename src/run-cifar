{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "% cd /content/drive/MyDrive/gvcl-gmm/src"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import time\n",
    "import numpy as np\n",
    "import torch\n",
    "import utils\n",
    "\n",
    "# Data loader, model, approach\n",
    "from dataloaders import cifar as dataloader\n",
    "from networks.gvcl_models import ZenkeNetFiLM as network\n",
    "from approaches import gvcl as approach\n",
    "\n",
    "# Arguments\n",
    "args = {}\n",
    "args[\"seed\"] = 0\n",
    "\n",
    "# Loading data\n",
    "data, taskcla, inputsize = dataloader.get(seed=args[\"seed\"])\n",
    "print(\"Input size =\", inputsize)\n",
    "print(\"Task info =\", taskcla)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "I34575q1xyVK"
   },
   "outputs": [],
   "source": [
    "def runCifar(lr=1e-3, beta=0.2, lamb=100, tau=1.0, run_to_task=1):\n",
    "    print(f\"******Running gmm2 : lr={lr}, beta={beta}, lamb={lamb}, tau={tau}******\")\n",
    "    args[\"lr\"] = lr\n",
    "    args[\"beta\"] = beta\n",
    "    args[\"lamb\"] = lamb\n",
    "    args[\"tau\"] = tau\n",
    "    args[\"checkpoint_path\"] = f\"{os.getcwd()}/checkpoint/gmm2_lr{args['lr']}_beta{args['beta']}_lamb{args['lamb']}_tau{args['tau']}\"\n",
    "\n",
    "    # Seed\n",
    "    np.random.seed(args[\"seed\"])\n",
    "    torch.manual_seed(args[\"seed\"])\n",
    "    torch.cuda.manual_seed(args[\"seed\"])\n",
    "\n",
    "    # Initializing model\n",
    "    model = network.Net(inputsize, taskcla, args[\"tau\"]).cuda()\n",
    "\n",
    "    # Initializing approach\n",
    "    appr = approach.Appr(model, data, nepochs=args[\"nepochs\"], lr=args[\"lr\"], beta=args[\"beta\"], lamb=args[\"lamb\"], checkpoint_path=args[\"checkpoint_path\"])\n",
    "\n",
    "    # Run\n",
    "    res = np.zeros([model.num_tasks + 1, model.num_tasks])\n",
    "    for t in range(run_to_task):\n",
    "        appr.train_task(t, eval_segment=1)\n",
    "        accs = appr.test_to_task(t, num_samples=64)\n",
    "        print(f\"Results: {accs}\")\n",
    "        for i in range(t + 1):\n",
    "            res[t][i] = accs[i]\n",
    "        res[model.num_tasks][t] = np.mean(np.array(accs))\n",
    "        print(f\"Overall: {res[model.num_tasks][:t+1]}\")\n",
    "        np.savetxt(f\"{args['checkpoint_path']}_nepochs{args['nepochs']}.txt\", res, \"%.4f\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for nepochs in [60]:\n",
    "    args[\"nepochs\"] = nepochs\n",
    "    for lr in [1e-3]:\n",
    "        for beta, tau, lamb in [[0.2,  50.0, 10]]:\n",
    "            runCifar(lr, beta, lamb, tau, run_to_task=11)"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "cifar-tuning.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
